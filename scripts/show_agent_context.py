#!/usr/bin/env python
"""Show the complete context provided to Clanker agent.

This script displays:
1. Static instructions (what Clanker provides, fresh each request)  
2. Dynamic instructions (evaluated at runtime)
3. Tool schemas (what pydantic-ai auto-generates)
4. Summary statistics

Useful for understanding what the LLM actually receives.
"""

import sys
import json
from pathlib import Path

# Add src to path so we can import clanker modules
sys.path.insert(0, str(Path(__file__).parent.parent / "src"))

from clanker.agent import ClankerAgent
from clanker.models import ModelTier
from clanker.runtime import bootstrap_runtime_context
from clanker.tools import create_clanker_toolset


def show_static_instructions():
    """Show the static instructions we provide to the agent."""
    print("=" * 80)
    print("STATIC INSTRUCTIONS (fresh each request)")
    print("=" * 80)
    
    context = bootstrap_runtime_context()
    agent = ClankerAgent(ModelTier.LOW, runtime=context)
    instructions = agent._get_instructions()
    print(instructions)
    print(f"\nLength: {len(instructions)} characters")
    return instructions


def show_dynamic_instructions():
    """Show what dynamic instructions would add at runtime."""
    print("\n" + "=" * 80)
    print("DYNAMIC INSTRUCTIONS (evaluated at runtime)")
    print("=" * 80)
    
    # Show daemon status
    try:
        from clanker.daemon import DaemonManager, DaemonStatus
        from clanker.runtime import get_runtime_context
        manager = DaemonManager(runtime=get_runtime_context())
        daemons = manager.list_daemons()
        running = len([d for d in daemons if d['status'] == DaemonStatus.RUNNING])
        if running > 0:
            daemon_hint = f"Current state: {running} daemons running."
        else:
            daemon_hint = "Current state: No daemons running."
        print(f"Daemon Status: {daemon_hint}")
    except Exception as e:
        print(f"Daemon Status: Error getting status - {e}")
    
    # Show app hints
    try:
        from clanker.context import get_smart_hints
        app_hints = get_smart_hints()
        print(f"App Hints:\n{app_hints}")
    except Exception as e:
        print(f"App Hints: Error getting hints - {e}")
    
    return daemon_hint, app_hints


def show_tool_schemas():
    """Show the tool schemas pydantic-ai generates."""
    print("\n" + "=" * 80)
    print("TOOL SCHEMAS (auto-generated by pydantic-ai)")
    print("=" * 80)
    
    context = bootstrap_runtime_context()
    toolset = create_clanker_toolset(runtime=context)
    
    # Group tools by category
    app_tools = []
    daemon_tools = []
    core_tools = []
    
    for name in sorted(toolset.tools.keys()):
        if name.startswith(('example_', 'weather_')):
            app_tools.append(name)
        elif 'daemon' in name:
            daemon_tools.append(name)
        else:
            core_tools.append(name)
    
    # Show tool details by category
    for category, tools in [("CORE TOOLS", core_tools), ("DAEMON TOOLS", daemon_tools), ("APP TOOLS", app_tools)]:
        if tools:
            print(f"\n{category}:")
            for name in tools:
                tool = toolset.tools[name]
                print(f"  {name}: {tool.description}")
    
    return len(toolset.tools)


def show_summary(instructions, daemon_hint, app_hints, tool_count):
    """Show summary statistics."""
    print("\n" + "=" * 80)
    print("SUMMARY")
    print("=" * 80)
    
    print(f"Static instructions: {len(instructions):,} characters")
    print(f"Dynamic daemon hint: {len(daemon_hint):,} characters") 
    print(f"Dynamic app hints: {len(app_hints):,} characters")
    print(f"Tools available: {tool_count}")
    
    # Rough estimate of total context
    estimated_tool_context = tool_count * 150  # Rough average per tool
    total_estimated = len(instructions) + len(daemon_hint) + len(app_hints) + estimated_tool_context
    print(f"Estimated total context: ~{total_estimated:,} characters")


def main():
    """Main function to show complete agent context."""
    try:
        print("Clanker Agent Context Inspector (REFACTORED)")
        print("Analyzing what the LLM actually receives...\n")
        
        # Show each component
        instructions = show_static_instructions()
        daemon_hint, app_hints = show_dynamic_instructions()
        tool_count = show_tool_schemas()
        show_summary(instructions, daemon_hint, app_hints, tool_count)
        
        print(f"\n{'=' * 80}")
        print("ANALYSIS COMPLETE")
        print(f"{'=' * 80}")
        
    except Exception as e:
        print(f"Error analyzing context: {e}")
        import traceback
        traceback.print_exc()
        sys.exit(1)


if __name__ == "__main__":
    main()